14.1 包含对象成员的类
    14.1.1 valarray类简介
    14.1.2 Student类的设计
    14.1.3 Student类示例
14.2 私有继承
    14.2.1 Student类示例（新版本）
    14.2.2 使用包含还是私有继承
    14.2.3 保护继承
    14.2.4 使用using重新定义访问权限
14.3 多重继承
    14.3.1 有多少Worker
    14.3.2 哪个方法
    14.3.3 MI小结
14.4 类模板
    14.4.1 定义类模板
    14.4.2 使用模板类
    14.4.3 深入探讨模板类
    14.4.4 数组模板示例和非类型参数[自动变量维护的内存栈比new和delete管理的堆内存快]
    14.4.5 模板多功能性
    14.4.6 模板的具体化
    14.4.7 成员模板
    14.4.8 将模板用作参数
    14.4.9 模板类和友元
    14.4.10 模板别名（C++11）
14.5 总结
14.6 复习题
    14.6.1
        a. is-a public
        b. has-a private
        c. is-a public
        d. has-a private
        e. is-a public Person; has-a private Automobile
    14.6.2
        Gloam::Gloam(int g = 0, const char* s = "C++") : glip(g), fb(s) { }

        Gloam::Gloam(int g, const Frabjous & f) : glip(g), fb(f) { }

        void Gloam::tell() { cout<<glip; fb.tell(); }
    14.6.3
        Gloam::Gloam(int g = 0, const char* s = "C++") : glip(g), Frabjous(f) { }
        
        Gloam::Gloam(int g, const Frabjous & f) : glip(g), Frabjous(f) { }
        
        void Gloam::tell() { cout<<glip; Frabjous::tell(); }
        
    14.6.4
        class Stack
        {
        private:
            enum {MAX = 10};
            Worker* items{MAX};
            int top;
        public:
            Stack();
            bool isempty();
            bool isfull();
            bool push(const Worker* & itme);
            bool pop(Worker* & item);
        };
    14.6.5
        a. ArrayTP<string> as;
        b. Stack<double[]> sd;
        c. Stack<Worker*> sw;
        d. 4个：ArrayTP<int, 10>; ArrayTP<double, 10>; ArrayTP<int, 5>; ArrayTP< ArrayTP<int, 5>, 10>
    14.6.6
        虚基类与非虚基类的区别：
            1.虚基类使得从多个类（基类相同）派生出的对象只继承一个基类对象；非虚基类使得从多个类（基类相同）派生出的对象继承多个基类对象。
            2.非虚基类允许信息通过中间类自动传递给基类；虚基类禁止信息通过中间类自动传递给基类。
            3.使用非虚基类时，如果类从不同的类那里继承类两个或更多的同名成员（数据或方法），使用该成员名时，如果没有使用类名进行限定，将导致二义性；如果使用的是虚基类，则这样做不一定导致二义性。
14.7 编程练习
    详见目录 ./program pratice